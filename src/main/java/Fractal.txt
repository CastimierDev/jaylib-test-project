import kotlin.jvm.JvmStatic
import com.raylib.Raylib
import com.raylib.Jaylib
import com.raylib.Jaylib.*
import com.raylib.Raylib.*
import com.raylib.Raylib.Vector2
import org.kotlinmath.Complex
import org.kotlinmath.complex
import kotlin.math.abs

val WIDTH = 1920
val HEIGHT = 1080
//val SCALE = 1
val RE_START = -2
val RE_END = 1
val IM_START = -1
val IM_END = 1
val RE_WIDTH = (RE_END - RE_START)
val IM_HEIGHT = (IM_END - IM_START)
val MAX_ITER = 80

var zoom = 1.0

lateinit var image: Image
lateinit var texture: Texture

fun mandelbrot(c: Complex): Int {
    var z = complex(0, 0)
    var n = 0
    while (z.mod <= 2 && n < MAX_ITER) {
        z = z * z + c
        n += 1
    }
    return n
}

fun plot_image() {
    for (x in 0..WIDTH ) {
        for (y in 0..HEIGHT ) {
            val c = complex(
                (RE_START + (x / (WIDTH.toDouble() )) * RE_WIDTH) * zoom,
                (IM_START + (y / (HEIGHT.toDouble() )) * IM_HEIGHT) * zoom
            )

            val m = mandelbrot(c)
            val hue = (255f * m.toFloat() / MAX_ITER.toFloat())
            val saturation = 255f
            val value = if (m < MAX_ITER) 255f else 0f
            val color = ColorFromHSV(hue.toFloat(), saturation, value)
            //println("$x $y $c")
            ImageDrawPixel(image, x, y, color)
        }
    }
}






fun update(){
    if (IsKeyPressed(KEY_SPACE)) {
        zoom *= 1.2
        plot_image()
    } else  if (IsKeyPressed(KEY_ENTER)) {
        zoom *= 0.8
        plot_image()
    }
}

//    elif keyboard . up :
//    IM_START -= 0.2
//    plot_image()
//    elif keyboard . down :
//    IM_START += 0.2
//    plot_image()
//    elif keyboard . left :
//    RE_START -= 0.2
//    plot_image()
//    elif keyboard . right :
//    RE_START += 0.2
//    plot_image()


    object Main {
        @JvmStatic
        fun main(args: Array<String>) {
            Raylib.InitWindow(WIDTH, HEIGHT, "Demo")
            Raylib.SetTargetFPS(60)

            image = GenImageColor(WIDTH, HEIGHT, BLUE)

            plot_image()

            texture = LoadTextureFromImage(image)
            SetTextureFilter(texture, TEXTURE_FILTER_BILINEAR)

            while (!Raylib.WindowShouldClose()) {
                update()
                draw()
            }
            Raylib.CloseWindow()
        }

        private fun draw() {
            BeginDrawing()


            UpdateTexture(texture, image.data())
            DrawTextureEx(texture, Vector2(), 0f, 1f, WHITE)


            DrawText("Hello world", 190, 200, 20, VIOLET)
            DrawFPS(20, 20)
            EndDrawing()
        }
    }